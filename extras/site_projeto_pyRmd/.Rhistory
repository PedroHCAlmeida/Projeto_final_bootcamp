else 0 for _,row in df.iterrows()]
df['AGE_ABOVE_50th']=[1 if row['AGE_PERCENTIL'] in ['50th','60th', '70th','80th', '90th', 'Above 90th']
else 0 for _,row in df.iterrows()]
df['AGE_ABOVE_80th']=[1 if row['AGE_PERCENTIL'] in ['80th', '90th', 'Above 90th']
else 0 for _,row in df.iterrows()]
# Eliminando a coluna "AGE_PERCENTIL" original
df.drop('AGE_PERCENTIL', axis=1, inplace=True)
df.head()
```
Agora com o problema da coluna Percentil resolvido temos 6 colunas demográficas, todas elas do tipo inteiro e categóricas.
### Teste de Chi Quadrado
Considerando que essas informações demográficas não possuem uma influência das demais variáveis, vou analisar cada uma individualmente, verificando se elas possuem alguma relação de dependência com a variável alvo, ou seja, a variável "ICU". Para isso vou realizar um teste de Chi Quadrado de Pearson com significância de **5%** para decidir se alguma dessas variáveis deve ser retirada.<br>
Este teste vai testar a seguinte hipótese:
$H_0$ : Colunas demográficas são independentes em relação a variável alvo('ICU')<br>
$H_a$ : Colunas demográficas são dependentes em relação a variável alvo('ICU') <br>
![](https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/img017.png)
### Variáveis de idade
Para visualizar melhor as relações dessa variáveis com a variável "ICU" vou calcular a proporção de pessoas que foram para UTI para cada valor 0 ou 1 dessas variáveis, ou seja, dado que um paciente pertence a um grupo ele tem mais chance de ir para UTI do quem não pertence.
```{python}
#Selecionando as variáveis
ages = ['AGE_UNDER_30th','AGE_UNDER_50th','AGE_ABOVE_50th','AGE_ABOVE_80th','AGE_ABOVE65', 'ICU']
#Transformando as colunas em uma coluna "variable" e os valores em uma coluna "value" e mantendo a variável "ICU" fixa
ages_melt = pd.melt(df[ages], id_vars='ICU')
#Calculando a proporção da variável "ICU" para cada combinação "variable"(coluna), "value"(valor)
ages_prop = ages_melt.groupby(['variable','value'])['ICU'].mean().reset_index(name='Prop')
```
```{python}
ages_prop
```
Com a tabela pronta indicando a proporção, para cada valor de cada variável de idade, podemos visualizar em um gráfico esse comportamento.
```{python grafico3, eval=FALSE, echo=TRUE}
#Criando a figura
fig, ax3 = plt.subplots(figsize=(20,10))
#Criando o gráfico
sns.barplot(data=ages_prop, y='Prop', x='variable', hue='value', ax=ax3, palette='muted')
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI dado que pertence a uma faixa etária',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO QUE PERTENCIA  A UM GRUPO DAS COLUNAS DE IDADE',
xlabel='Variável', ylabel='Proporção',ax=ax3)
#Configurando a legenda
handles, labels = ax3.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(0.94, 1), loc=2, borderaxespad=0., fontsize=15)
#Configurando o eixo x
plt.xticks(range(5),labels=ages_prop['variable'].str.split(r'_| ').str.join('\n').unique())
#Anotando em cima das barras
annot_bar(ax3)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.1, 'GRÁFICO 3', color='black', transform=ax3.transAxes, fontsize=15)
plt.show()
```
```{python grafico33, echo=FALSE, fig.keep='last'}
#Criando a figura
fig, ax3 = plt.subplots(figsize=(20,10))
#Criando o gráfico
sns.barplot(data=ages_prop, y='Prop', x='variable', hue='value', ax=ax3, palette='muted')
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI dado que pertence a uma faixa etária',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO QUE PERTENCIA  A UM GRUPO DAS COLUNAS DE IDADE',
xlabel='Variável', ylabel='Proporção',ax=ax3)
#Configurando a legenda
handles, labels = ax3.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(0.94, 1), loc=2, borderaxespad=0., fontsize=15)
#Configurando o eixo x
plt.xticks(range(5),labels=ages_prop['variable'].str.split(r'_| ').str.join('\n').unique())
#Anotando em cima das barras
annot_bar(ax3)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.1, 'GRÁFICO 3', color='black', transform=ax3.transAxes, fontsize=15)
plt.show()
```
A partir do gráfico 3 parece que as variáveis de idade influenciam se o paciente vai ou não para UTI, para confirmar tal afirmação vou realizar um teste de Chi-Quadrado através da função compute_chi2( ), definida no arquivo [funcoes/feature](https://github.com/PedroHCAlmeida/Projeto_final_bootcamp/blob/main/funcoes/feature.py), essa função nos retorna os p valores para cada uma das variáveis, e se, algum deles for maior que **5%** não rejeitaremos a hipótese nula de que a variável é independente da variável alvo "ICU".
```{python}
#Calculando os p valores para colunas de idade
p_values = compute_chi2(df[ages].drop('ICU', axis=1), df['ICU'])
for col, p_value in p_values.items():
print(f'Considerando a hipótese nula de que a coluna {col} é independente da variável alvo "ICU"\n\
obteve-se um p valor igual a {np.round(p_value,4)}')
```
Analisando o p valor das colunas relacionadas às idades dos pacientes no teste de Chi-Quadrado da hipótese nula das variáveis serem independentes do paciente ir para UTI, todos os p valores foram **menores que 5%**, por esta razão temos evidências para **rejeitar a hipótese nula** e, por isso, essas variávies serão mantidas no dataframe.
### Variável de genêro
A outra variável demográfica é a variável de genêro, para identificar se o genêro influencia vamos repetir o mesmo processo.
```{python}
#Construindo um dataframe com a coluna "GENDER" e "ICU", mantendo o "ICU" fixo e tranformando a coluna "GENDER" em duas uma para o nome
#da variável("variable") e outra para os valores correspondentes("value")
gender_melt  = pd.melt(df[['GENDER', 'ICU']], id_vars='ICU')
#Calculando a proporção da variável "ICU" para cada combinação "variable"(coluna), "value"(valor)
gender_prop = gender_melt.groupby(['variable','value'])['ICU'].mean().reset_index(name='Prop')
```
```{python}
gender_prop
```
Com a tabela pronta indicando a proporção de pacientes que foram para UTI dependendo do genêro podemos visualizar em um gráfico esse comportamento.
**OBS: POR CONTA DA ANONIMIZAÇÃO DOS DADOS NÃO FOI INFORMADO QUAL GENÊRO É REPRESENTADO POR QUAL NÚMERO, POR ISSO SERÁ REPRESENTADO COMO 0 e 1**
```{python grafico4, eval=FALSE, echo=TRUE}
#Criando a figura
fig, ax4 = plt.subplots(figsize=(12,8))
#Criando o gráfico
sns.barplot(data=gender_prop, y='Prop', x='variable', hue='value', ax=ax4, palette=['#ffcc00','#0066ff'])
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI de acordo com o gênero',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO O GENÊRO',
xlabel='Variável', ylabel='Proporção',ax=ax4)
#Configurando a legenda
handles, labels = ax4.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(0.94, 1), loc=2, borderaxespad=0., fontsize=15)
#Anotando em cima das barras
annot_bar(ax4)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.1, 'GRÁFICO 4', color='black', transform=ax4.transAxes, fontsize=15)
plt.show()
```
```{python grafico44, echo=FALSE, fig.keep='last'}
#Criando a figura
fig, ax4 = plt.subplots(figsize=(12,8))
#Criando o gráfico
sns.barplot(data=gender_prop, y='Prop', x='variable', hue='value', ax=ax4, palette=['#ffcc00','#0066ff'])
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI de acordo com o gênero',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO O GENÊRO',
xlabel='Variável', ylabel='Proporção',ax=ax4)
#Configurando a legenda
handles, labels = ax4.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(0.94, 1), loc=2, borderaxespad=0., fontsize=15)
#Anotando em cima das barras
annot_bar(ax4)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.1, 'GRÁFICO 4', color='black', transform=ax4.transAxes, fontsize=15)
plt.show()
```
A partir do gráfico 4 percebe-se que dependendo do genêro parece haver uma diferença na chance de ir para UTI, porém vamos realizar um teste de Chi-Quadrado para decidir se essa variável será mantida.
```{python}
p_value_gender = compute_chi2(df[['GENDER']], df['ICU'])
print(f'Considerando a hipótese nula de que a coluna GENDER é independente da variável alvo "ICU" obteve-se um p valor igual a \
{np.round(p_value_gender["GENDER"],4)}')
```
Analisando o p valor da coluna de genêro no teste de Chi-Quadrado da hipótese nula da variável ser **independente** do paciente ir para **UTI**, foi maior que **5%**, portanto **não temos evidências para rejeitar a hipótese nula** e por esta razão vou eliminar a coluna "GENDER" do dataframe.
```{python}
#Eliminando a coluna "GENDER"
df.drop('GENDER', axis=1, inplace=True)
```
# Análise das demais variáveis categóricas
Além das colunas demográficas, as colunas que nos dizem se o paciente possui alguma doença ou alguma condição de saúde também são colunas categóricas binárias, portanto, podemos realizar o mesmo processo para visualizar as proporções e realizar um teste de Chi-Quadrado<br><br>
No entanto, **não realizarei este teste**. Tomei esta decisão pois acredito que essas variáveis possuem uma relação direta com a saúde de um paciente e podem sofrer uma influência muito grande de outros fatores, como por exemplo, uma doença pode se agravar com a idade e, portanto, a proporção de pacientes que precisaram ir para UTI dado que esse paciente possui uma certa condição de saúde pode ser diferente dependendo da idade, o que não seria levado em conta em um teste realizado individualmente para cada variável.
```{python}
#Selecionando as variáveis categóricas a respeito das doenças e condições médicas
diseases = ['DISEASE GROUPING 1','DISEASE GROUPING 2','DISEASE GROUPING 3','DISEASE GROUPING 4',\
'DISEASE GROUPING 5','DISEASE GROUPING 6','HTN','IMMUNOCOMPROMISED','OTHER', 'ICU']
```
```{python}
#Construindo um dataframe com as colunas relacionadas as doenças e "ICU", mantendo o "ICU" fixo e tranformando as demais colunas
#em duas que representarão o nome da variável("variable") e outra os valores correspondentes("value")
diseases_melt  = pd.melt(df[diseases], id_vars='ICU')
#Calculando a proporção da variável "ICU" para cada combinação "variable"(coluna), "value"(valor)
diseases_prop = diseases_melt.groupby(['variable','value'])['ICU'].mean().reset_index(name='Prop')
```
```{python}
diseases_prop
```
Com a tabela pronta indicando a proporção de pacientes que foram para UTI, dado que possuia alguma condição de saúde, podemos visualizar em um gráfico esse comportamento.<br>
**OBS: POR CONTA DA ANONIMIZAÇÃO DOS DADOS NÃO FOI INFORMADO O QUE REPRESENTA CADA GRUPO DE DOENÇA**
```{python grafico5, eval=FALSE, echo=TRUE}
#Criando a figura
fig, ax5 = plt.subplots(figsize=(20,10))
#Criando o gráfico
sns.barplot(data=diseases_prop, y='Prop', x='variable', hue='value', ax=ax5, palette='muted')
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI dentre os grupos de doenças',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO QUE APRESENTOU DETERMINADO GRUPO DE DOENÇA',
xlabel='Variável', ylabel='Proporção',ax=ax5)
#Configurando a legenda
handles, labels = ax5.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(0.94, 1), loc=2, borderaxespad=0., fontsize=15)
#Configurando o eixo x
plt.xticks(range(9),labels=diseases_prop['variable'].str.split(r'_| ').str.join('\n').unique())
#Anotando em cima das barras
annot_bar(ax5)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.12, 'GRÁFICO 5', color='black', transform=ax5.transAxes, fontsize=15)
plt.show()
```
```{python grafico55, echo=FALSE, fig.keep='last'}
#Criando a figura
fig, ax5 = plt.subplots(figsize=(20,10))
#Criando o gráfico
sns.barplot(data=diseases_prop, y='Prop', x='variable', hue='value', ax=ax5, palette='muted')
#Plotando rótulos e títulos
labs(title='Proporção de pacientes que foram para UTI dentre os grupos de doenças',
subtitle='PROPORÇÃO CALCULADA DE PACIENTES QUE FORAM PARA UTI DADO QUE APRESENTOU DETERMINADO GRUPO DE DOENÇA',
xlabel='Variável', ylabel='Proporção',ax=ax5)
#Configurando a legenda
handles, labels = ax5.get_legend_handles_labels()
plt.legend(handles[0:2], ['0','1'], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=15)
#Configurando o eixo x
plt.xticks(range(9),labels=diseases_prop['variable'].str.split(r'_| ').str.join('\n').unique())
#Anotando em cima das barras
annot_bar(ax5)
#Definindo o eixo y
plt.ylim([0,1])
#Adicionando uma referência para o gráfico
plt.text(0,-0.12, 'GRÁFICO 5', color='black', transform=ax5.transAxes, fontsize=15)
plt.show()
```
A partir do gráfico 5 parece que algumas condições não apresentam uma chance maior de ir para UTI dado que o paciente possuia tal condição, por exemplo as variáveis "DISEASE GROUPING 6" e "OTHER", possuem proporções muito próximas, independente do valor.
<br><br>
No entanto, como foi mencionado anteriormente, não aplicarei nenhum teste para removê-las, e manterei no dataset por enquanto.
# Análise das variáveis numéricas
Como foi visto no início deste notebook, o dataset que estamos analisando possuem muitas colunas e, a maior parte delas eram numéricas. A fim de estudar se todas essas variáveis são importantes na hora de criar um modelo de Machine Learning existem algumas técnicas que podem ser aplicadas, como por exemplo:<br>
* Análise de correlação : se tivermos em nosso dataset muitas variáveis que estão altamente correlacionadas elas podem ser representados com apenas uma dessas colunas, por exemplo, em vez de ter 5 colunas que trazem a mesma informação, de modo de que quando uma aumente a outra possua um comportamento semelhante, aumentando ou descrescendo na mesma intensidade, podemos eliminar 4 delas e manter apenas 1 dessas colunas.<br><br>
* Análise de variância : colunas com uma variância igual a 0, ou seja, possuem o mesmo valor em todo o dataset não trazem nenhuma informação em relação a variável alvo e podem ser todas eliminadas.
## Análise de correção entre as variáveis
Para entender se existem colunas com uma correlação muito alta em nosso dataset, vamos observar um mapa de calor com as correlações calculadas para cada combinação de colunas.
**OBS: A CORRELAÇÃO SERÁ CALCULADA EM FORMA DE MÓDULO, OU SEJA, MEDINDO A FORÇA DESSA CORRELAÇÃO INDEPENDENTE DO SINAL(positiva ou negativa)**
```{python grafico6, eval=FALSE, echo=TRUE}
#Criando a figura
fig,ax6 = plt.subplots(figsize=(35, 30))
#Criando a matriz de correlação absoluta usando apenas colunas contínuas
cor = df.select_dtypes('float64').corr().abs()
#Criando uma máscara para ocultar a diagonal e a parte triangular superior da matriz
mask = np.triu(np.ones_like(cor, dtype=bool))
#Criando o gráfico
sns.heatmap(cor,
cmap='Reds',
mask=mask,
ax=ax6)
#Plotando rótulos e títulos
labs(title='Correlação entre variáveis contínuas do conjunto de dados', ax=ax6)
#Mudando o tamnho da fonte da barra de cor
cbar = ax6.collections[0].colorbar
cbar.ax.tick_params(labelsize=20)
#Adicionando uma referência para o gráfico
plt.text(0,-0.15, 'GRÁFICO 6', color='black', transform=ax6.transAxes, fontsize=15)
plt.show()
```
```{python grafico66, echo=FALSE, fig.keep='last'}
#Criando a figura
fig,ax6 = plt.subplots(figsize=(35, 30))
#Criando a matriz de correlação absoluta usando apenas colunas contínuas
cor = df.select_dtypes('float64').corr().abs()
#Criando uma máscara para ocultar a diagonal e a parte triangular superior da matriz
mask = np.triu(np.ones_like(cor, dtype=bool))
#Criando o gráfico
sns.heatmap(cor,
cmap='Reds',
mask=mask,
ax=ax6)
#Plotando rótulos e títulos
labs(title='Correlação entre variáveis contínuas do conjunto de dados', ax=ax6)
#Mudando o tamnho da fonte da barra de cor
cbar = ax6.collections[0].colorbar
cbar.ax.tick_params(labelsize=20)
#Adicionando uma referência para o gráfico
plt.text(0,-0.15, 'GRÁFICO 6', color='black', transform=ax6.transAxes, fontsize=15)
plt.show()
```
A partir do gráfico 6 percebemos que muitas colunas possuem uma alta correlação absoluta, ou seja, temos uma motivação para eliminar colunas correlacionadas de forma que apenas uma delas continue no dataset.<br><br>
Para isso, vou utilizar a função compute_high_corr( ), definida no arquivo [funcoes/feature](https://github.com/PedroHCAlmeida/Projeto_final_bootcamp/blob/main/funcoes/feature.py), que irá calcular a matriz de correlação das colunas e percorrer essa matriz de tal forma que se uma coluna tiver uma correlação mais alta que o valor de corte em relação a alguma coluna que já foi percorrida ela será armazenada em uma lista e essa lista será retornada ao final, ou seja, em um grupo onde existem diversas colunas correlacionas apenas uma delas será mantida.
```{python}
#Calculando as colunas para eliminar com um valor de corte de 0.95
cols_drop_high_corr = compute_high_corr(df.select_dtypes('float64'), 0.95)
#Mostrando na tela essas colunas
print(cols_drop_high_corr)
#Mostrando na tela a quantidade de colunas
print(len(cols_drop_high_corr))
```
Podemos perceber que, de acordo com a função compute_high_corr( ), podemos eliminar essas 134 colunas pois existem outras colunas no dataset que possuem uma alta correlação com estas.
```{python}
df.drop(cols_drop_high_corr, axis=1, inplace=True)
```
## Análise da variância
Outro fator que podemos analisar de forma fácil e, já nos diz muito sobre determinada variável, é a variância. Esta é uma medida usada para mensurar a dispersão dos dados em um conjunto, ou seja, quanto menor essa variância mais agrupados estão os valores. <br>
Uma vez que nós estamos trabalhando com dados normalizados, como foi informado pelo Sírio-Libanês, fica difícil ter uma referência de qual o valor mínimo de uma variância para uma variável ser considerada importante, no entanto, temos uma certeza, se alguma das variáveis possui uma **variância igual a zero**, é porque ela é **completamente desnecessária** ao se resolver o nosso problema.
Para analisar este fato, primeiramente vou olhar para o boxplot de 15 colunas aleatórias a fim de encontrar algo que possamos analisar, ou, conseguimos ver se alguma dessas colunas possui variância zero.
```{python}
#Setando a semente aletória que foi definida no começo do notebook
np.random.seed(SEED)
#Selecionando o dataset com as colunas contínuas
cont = df.select_dtypes('float64')
#Escolhendo o dataset com 15 colunas aleatórias
sample = cont[np.random.choice(cont.columns, size=15, replace=False)]
#Juntando com a informação da variável alvo para analisar a diferença entre os grupos
sample_cont = pd.concat([sample, df['ICU']],axis=1)
#Transformando as colunas em uma coluna "variable" e os valores em uma coluna "value" e mantendo a variável "ICU" fixa
cont_melt = pd.melt(sample_cont, id_vars='ICU')
```
```{python}
cont_melt.head()
```
```{python grafico7, eval=FALSE, echo=TRUE}
#Criando a figura
fig, ax7 = plt.subplots(figsize=(20,10))
#Criando os boxplots
sns.boxplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, showfliers=False)
#Criando os stripsplots
sns.stripplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, dodge=True)
#Plotando rótulos e títulos
labs(title='Boxplots de 15 colunas contínuas aleatórias',
xlabel='Variável',
ylabel='Valor',
subtitle='COLUNAS REFERENTES AOS DADOS MÉDICOS DE EXAMES E SINAIS VITAIS', ax=ax7)
#Configurando o eixo x
plt.xticks(range(15),labels=cont_melt['variable'].str.split('_').str.join('\n').unique(), rotation=35)
#Configurando a legenda
handles, labels = ax7.get_legend_handles_labels()
plt.legend(handles[0:2], ['Não foi para UTI', 'Foi para UTI'], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=15)
#Adicionando uma referência para o gráfico
plt.text(0,-0.15, 'GRÁFICO 7', color='black', transform=ax7.transAxes, fontsize=15)
plt.show()
```
```{python grafico77, echo=FALSE, fig.keep='last'}
#Criando a figura
fig, ax7 = plt.subplots(figsize=(20,10))
#Criando os boxplots
sns.boxplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, showfliers=False)
#Criando os stripsplots
sns.stripplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, dodge=True)
#Plotando rótulos e títulos
labs(title='Boxplots de 15 colunas contínuas aleatórias',
xlabel='Variável',
ylabel='Valor',
subtitle='COLUNAS REFERENTES AOS DADOS MÉDICOS DE EXAMES E SINAIS VITAIS', ax=ax7)
#Configurando o eixo x
plt.xticks(range(15),labels=cont_melt['variable'].str.split('_').str.join('\n').unique(), rotation=35)
#Configurando a legenda
handles, labels = ax7.get_legend_handles_labels()
plt.legend(handles[0:2], ['Não foi para UTI', 'Foi para UTI'], bbox_to_anchor=(0.85, 1), loc=2, borderaxespad=0., fontsize=15)
#Adicionando uma referência para o gráfico
plt.text(0,-0.15, 'GRÁFICO 7', color='black', transform=ax7.transAxes, fontsize=15)
plt.show()
```
A partir dos boxplots percebemos que algumas variáveis parecem realmente ter uma variância muito baixa, como a "SODIUM DIFF", "CREATININ DIFF", e as demais que representam diferenças. Por outro lado, percebe-se uma diferença muito grande dos valores de quem foi para UTI e de quem não foi na variável "LACTATE MEDIAN, podendo indicar que essa variável seja importante na hora de modelar os dados.<br><br>
Por esta razão vou eliminar todas aquelas variáveis com um valor de variância igual a 0.
```{python}
#Criando uma série com as variâncias para cada coluna numérica
var = df.select_dtypes('float64').var()
#Ordenando em ordem crescente e mostrando os primeiros valores
var.sort_values().head()
```
Observando os primeiros valores já percebe-se que temos algumas colunas com variância igual a 0.
```{python}
#Selecionando as colunas com variância igual a 0
cols_0_var = [col for col in var.index if var[col] == 0]
#Imprimindo na tela as colunas com variância igual a 0
print(cols_0_var)
#Mostrando na tela a quantidade de colunas
print(len(cols_0_var))
```
Podemos perceber que temos 36 colunas com variância igual a 0 no dataset, e, por esta razão irei eliminá-las.
```{python}
#Eliminando as colunas com variância igual a 0
df.drop(cols_0_var,axis=1, inplace=True)
```
```{python}
df.head()
```
```{python}
df.shape
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
quit
reticulate::repl_python()
#Configurando o estilo dos gráficos
sns.set_style('darkgrid')
#Filtrando os avisos
warnings.filterwarnings('ignore')
#Definindo a semente de números aleatórios
SEED = 64541
quit
reticulate::repl_python()
import os
os.chdir("../../funcoes")
from feature import compute_chi2, compute_high_corr, binary_features
from my_plot import labs, annot_bar
from preprocessing import fill_table, select_window
os.chdir("../extras/site_projeto_pyRmd")
quit
reticulate::repl_python()
print(binary_features.__doc__)
quit
reticulate::repl_python()
print(compute_chi2.__doc__)
quit
reticulate::repl_python()
# Agrupando os dados por "PATIENT_VISIT_IDENTIFIER" e "ICU" e aplicando a função fill_table
df = df.groupby(['PATIENT_VISIT_IDENTIFIER', 'ICU']).apply(fill_table)
quit
reticulate::repl_python()
# Eliminando dados nulos
df = df.dropna()
quit
reticulate::repl_python()
#Selecionando as linhas onde o paciente chegou na UTI
rows_to_drop = df[(df['WINDOW'] == '0-2') & (df['ICU'] == 1)].index
#Eliminando as linhas do dataframe original
df.drop(index=rows_to_drop, inplace=True)
# Agrupando por paciente e aplicando a função select_window
df = df.groupby('PATIENT_VISIT_IDENTIFIER').apply(select_window)
#Não são mais úteis as variáveis da janela de tempo e do identificador
df.drop(['WINDOW', 'PATIENT_VISIT_IDENTIFIER'], axis=1, inplace=True)
#Resetando o index e eliminando essa informação
df.reset_index(drop=True, inplace=True)
quit
reticulate::repl_python()
binary = binary_features(df)
binary
quit
reticulate::repl_python()
df[binary] = df[binary].astype('int64')
df.info()
quit
#Setando a semente aletória que foi definida no começo do notebook
reticulate::repl_python()
np.random.seed(SEED)
reticulate::repl_python()
#Selecionando o dataset com as colunas contínuas
cont = df.select_dtypes('float64')
#Escolhendo o dataset com 15 colunas aleatórias
sample = cont[np.random.choice(cont.columns, size=15, replace=False)]
#Juntando com a informação da variável alvo para analisar a diferença entre os grupos
sample_cont = pd.concat([sample, df['ICU']],axis=1)
#Transformando as colunas em uma coluna "variable" e os valores em uma coluna "value" e mantendo a variável "ICU" fixa
cont_melt = pd.melt(sample_cont, id_vars='ICU')
quit
reticulate::repl_python()
cont_melt.head()
quit
reticulate::repl_python()
#Criando a figura
fig, ax7 = plt.subplots(figsize=(20,10))
#Criando os boxplots
sns.boxplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, showfliers=False)
#Criando os stripsplots
sns.stripplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, dodge=True)
#Plotando rótulos e títulos
labs(title='Boxplots de 15 colunas contínuas aleatórias',
xlabel='Variável',
ylabel='Valor',
subtitle='COLUNAS REFERENTES AOS DADOS MÉDICOS DE EXAMES E SINAIS VITAIS', ax=ax7)
#Configurando o eixo x
plt.xticks(range(15),labels=cont_melt['variable'].str.split('_').str.join('\n').unique(), rotation=35)
#Configurando a legenda
handles, labels = ax7.get_legend_handles_labels()
plt.legend(handles[0:2], ['Não foi para UTI', 'Foi para UTI'], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=15)
#Adicionando uma referência para o gráfico
plt.text(0,-0.15, 'GRÁFICO 7', color='black', transform=ax7.transAxes, fontsize=15)
plt.show()
_ = plt.text(0,-0.15, 'GRÁFICO 7', color='black', transform=ax7.transAxes, fontsize=15)
quit
reticulate::repl_python()
#Criando a figura
fig, ax7 = plt.subplots(figsize=(20,10))
#Criando os boxplots
ax7 = sns.boxplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, showfliers=False)
#Criando os stripsplots
ax7 = sns.stripplot(x='variable', y='value', hue='ICU',
data=cont_melt, palette=['#3366ff', '#993300'],
ax=ax7, dodge=True)
#Plotando rótulos e títulos
labs(title='Boxplots de 15 colunas contínuas aleatórias',
xlabel='Variável',
ylabel='Valor',
subtitle='COLUNAS REFERENTES AOS DADOS MÉDICOS DE EXAMES E SINAIS VITAIS', ax=ax7)
#Configurando o eixo x
_ = plt.xticks(range(15),labels=cont_melt['variable'].str.split('_').str.join('\n').unique(), rotation=35)
#Configurando a legenda
handles, labels = ax7.get_legend_handles_labels()
_ = plt.legend(handles[0:2], ['Não foi para UTI', 'Foi para UTI'], bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=15)
#Adicionando uma referência para o gráfico
_ = plt.text(0,-0.15, 'GRÁFICO 7', color='black', transform=ax7.transAxes, fontsize=15)
plt.show()
quit
# Previsões
![](https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/share.png?token=ASNXTHRK252ELJWBWQKPYETBB3TCG)
# Previsões
![a](https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/share.png?token=ASNXTHRK252ELJWBWQKPYETBB3TCG)
# Previsões
![](https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/share.png)
# Previsões
!(https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/share.png)
# Previsões
![](https://raw.githubusercontent.com/PedroHCAlmeida/Projeto_final_bootcamp/main/img/share.png)
Sys.setenv(RETICULATE_PYTHON = "C:/Users/pedro/anaconda3_02/envs/bootcampfinal/python.exe")
library(reticulate)
use_condaenv("C:/Users/pedro/anaconda3_02/envs/bootcampfinal", required = TRUE)#
repl_python()
